function MIBexp_preproc(cfg1, cfg2, cfg3, outputfile)% called by MIBexp_freqanalysis_peersetup% triggers: baseline, stim or resp% warning off%[pathstr, outname] = fileparts(outputfile);mkdir(pathstr);fprintf('Outpath: %s\n', pathstr)%Variable for loading trialdef for missing triggers or not.loadtrialdata=0;%tryswitch cfg1.runcfg.preproc.loaddata    case 'yes'        load(fullfile(cfg1.runcfg.preproc.loaddatapath, cfg1.runcfg.PRE, outname))    case 'no'                cfg1 = ft_definetrial(cfg1); % define trials and plot trl        if strcmp(cfg1.runcfg.prunemibfromrep,'yes')            nmibinrep.off = length(find(cfg1.trl(:,5) == 1 & (cfg1.trl(:,11) == 0)));            nmibinrep.on = length(find(cfg1.trl(:,5) == 2 & (cfg1.trl(:,11) == 0)));            cfg1.trlincmibinrep = cfg1.trl;            cfg1.trl = cfg1.trl(find(cfg1.trl(:,11)==1),:);            fprintf('%d mib trials removed from rep\n', length(cfg1.trlincmibinrep) - length(cfg1.trl));        end       %Moved data = ft_preprocessing(cfg1); from here. endposBlock    =   find(cfg1.trl(:,13)==32); %Store position of block transitionso_cfg       =   cfg1.trl; %Store the whole cfg trial definition. Original%Loop over all the different blocks contained in one datafile. One datafile%should have a minimum of two blocks (40-60 trials). for     P       =   1:length(posBlock)            %Set the thresholds based on the first block    if P==1 || P==3 || P==5         %interactive mode enabled        interactive='yes';    else        %interactive mode disabled        interactive='no';    end        if P == length(posBlock)        cfg1.trl    =   o_cfg(posBlock(P):end,:);    else        cfg1.trl    =   o_cfg(posBlock(P):posBlock(P+1)-1,:);    end        data = ft_preprocessing(cfg1); % preprocess and save        artfctdef=[];    if strcmp(cfg1.artfrej, 'yes')        if strcmp(cfg1.loadartf, 'yes')            load(fullfile('/home/niels/MIBmeg/preproc', cfg1.runcfg.PRE, [outname '_preprocinfo']))            artfctdef = preprocinfo.artfctdef;        else % run artifact routines            close all            %%%% Automatic Artifact detection scripts            %Repair a channel due to different causes, e.g. jumps.             repChan=0;            if repChan                repairChannel                data.trial=interp.trial;                %Store the interp cfg in the data file for                %future reference.                 data.cfg.interp=interp.cfg;                interp=[];            end                        MATCHexp_car_artifact            MATCHexp_EOGh_artifact            cfg1.eoghorthr      = cfg.artfctdef.zvalue.cutoff;            artfctdef.eoghorthr = cfg.artfctdef.zvalue.cutoff;                        MATCHexp_EOGv_artifact            cfg1.eogverthr      = cfg.artfctdef.zvalue.cutoff;            artfctdef.eogverthr = cfg.artfctdef.zvalue.cutoff;                        MATCHexp_muscle_artifact            cfg1.musclethr      = cfg.artfctdef.zvalue.cutoff;            artfctdef.musclethr = cfg.artfctdef.zvalue.cutoff;                        MATCHexp_jump_artifact            cfg1.jumpthr        = cfg.artfctdef.zvalue.cutoff;            artfctdef.jumpthr   = cfg.artfctdef.zvalue.cutoff;                        %The new threshold values need to be inserted into the             %batch files for future reference and reanalysis.                                 end    end        preprocinfo=[];    if strcmp(cfg1.runcfg.prunemibfromrep,'yes')        preprocinfo.nmibinrep = nmibinrep;    end    preprocinfo.artfctdef = artfctdef;    preprocinfo.trlold = data.cfg.trlold;    preprocinfo.trl = data.cfg.trl;        %     % count number of true replay trials    %     nrepoff = length(find(preprocinfo.trlold(:,4)==2 & preprocinfo.trlold(:,5)==1));    %     nrepofftrue = nrepoff - preprocinfo.nmibinrep.off;        %     [pathname, fifname] = fileparts(cfg1.headerfile);    %     srpairout=[pathname filesep fifname '_srpair'];    %     load(srpairout)    %     preprocinfo.srpair = srpair;    %     delete([srpairout '.mat'])        save(sprintf('%s%s_block%d%d',outputfile,'preprocinfo',cfg1.numcfg,P), 'preprocinfo');        switch cfg3.resample        case 'yes'            data = ft_resampledata(cfg3,data);            data.cfg.trl = []; %remove trl, is useless after resampling        case 'no'            fprintf('NO DOWNSAMPLING APPLIED! \n')    end        [pathstr, name] = fileparts(outputfile);    fprintf('Saving %s%d%d to...\n %s\n', name,cfg1.numcfg,P ,pathstr)    save(sprintf('%sblock%d%d',outputfile,cfg1.numcfg,P), 'data');    % catch ME    %     disp(getReport(ME))    %     fid = fopen('/Users/Christoffer/Documents/MATLAB/Internship/Matching_task/MEGdata/MATCHexp_preproc_errorlog.txt', 'at');    %     fprintf(fid,'%s\n%s\n%s\n\n\n', datestr(now), cfg1.datafile, getReport(ME));    %     fclose('all');end % tryfprintf('\nFinished preprocessing divisions of current datafile.\n\n\n ')end